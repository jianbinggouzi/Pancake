package com.pancaker.pancake.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pancaker.pancake.domain.OperateLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATE_LOG".
*/
public class OperateLogDao extends AbstractDao<OperateLog, String> {

    public static final String TABLENAME = "OPERATE_LOG";

    /**
     * Properties of entity OperateLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OperateLogId = new Property(0, String.class, "operateLogId", true, "OPERATE_LOG_ID");
        public final static Property EntityId = new Property(1, String.class, "entityId", false, "entity_id");
        public final static Property SenderId = new Property(2, String.class, "senderId", false, "sender_id");
        public final static Property ReceiverId = new Property(3, String.class, "receiverId", false, "receiver_id");
        public final static Property OperateType = new Property(4, int.class, "operateType", false, "operate_type");
        public final static Property Time = new Property(5, java.util.Date.class, "time", false, "time");
        public final static Property EntityType = new Property(6, int.class, "entityType", false, "entity_type");
        public final static Property Text = new Property(7, String.class, "text", false, "text");
    }


    public OperateLogDao(DaoConfig config) {
        super(config);
    }
    
    public OperateLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATE_LOG\" (" + //
                "\"OPERATE_LOG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: operateLogId
                "\"entity_id\" TEXT," + // 1: entityId
                "\"sender_id\" TEXT," + // 2: senderId
                "\"receiver_id\" TEXT," + // 3: receiverId
                "\"operate_type\" INTEGER NOT NULL ," + // 4: operateType
                "\"time\" INTEGER," + // 5: time
                "\"entity_type\" INTEGER NOT NULL ," + // 6: entityType
                "\"text\" TEXT);"); // 7: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATE_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OperateLog entity) {
        stmt.clearBindings();
 
        String operateLogId = entity.getOperateLogId();
        if (operateLogId != null) {
            stmt.bindString(1, operateLogId);
        }
 
        String entityId = entity.getEntityId();
        if (entityId != null) {
            stmt.bindString(2, entityId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(4, receiverId);
        }
        stmt.bindLong(5, entity.getOperateType());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time.getTime());
        }
        stmt.bindLong(7, entity.getEntityType());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(8, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OperateLog entity) {
        stmt.clearBindings();
 
        String operateLogId = entity.getOperateLogId();
        if (operateLogId != null) {
            stmt.bindString(1, operateLogId);
        }
 
        String entityId = entity.getEntityId();
        if (entityId != null) {
            stmt.bindString(2, entityId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(4, receiverId);
        }
        stmt.bindLong(5, entity.getOperateType());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time.getTime());
        }
        stmt.bindLong(7, entity.getEntityType());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(8, text);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OperateLog readEntity(Cursor cursor, int offset) {
        OperateLog entity = new OperateLog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // operateLogId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // entityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // senderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // receiverId
            cursor.getInt(offset + 4), // operateType
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // time
            cursor.getInt(offset + 6), // entityType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OperateLog entity, int offset) {
        entity.setOperateLogId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEntityId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReceiverId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperateType(cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEntityType(cursor.getInt(offset + 6));
        entity.setText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OperateLog entity, long rowId) {
        return entity.getOperateLogId();
    }
    
    @Override
    public String getKey(OperateLog entity) {
        if(entity != null) {
            return entity.getOperateLogId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OperateLog entity) {
        return entity.getOperateLogId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
