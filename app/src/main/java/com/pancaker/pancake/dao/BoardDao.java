package com.pancaker.pancake.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pancaker.pancake.domain.Board;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOARD".
*/
public class BoardDao extends AbstractDao<Board, String> {

    public static final String TABLENAME = "BOARD";

    /**
     * Properties of entity Board.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BoardId = new Property(0, String.class, "boardId", true, "BOARD_ID");
        public final static Property BoardName = new Property(1, String.class, "boardName", false, "board_name");
        public final static Property BoardDesc = new Property(2, String.class, "boardDesc", false, "board_desc");
        public final static Property LetterNum = new Property(3, long.class, "letterNum", false, "letter_num");
    }


    public BoardDao(DaoConfig config) {
        super(config);
    }
    
    public BoardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOARD\" (" + //
                "\"BOARD_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: boardId
                "\"board_name\" TEXT," + // 1: boardName
                "\"board_desc\" TEXT," + // 2: boardDesc
                "\"letter_num\" INTEGER NOT NULL );"); // 3: letterNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Board entity) {
        stmt.clearBindings();
 
        String boardId = entity.getBoardId();
        if (boardId != null) {
            stmt.bindString(1, boardId);
        }
 
        String boardName = entity.getBoardName();
        if (boardName != null) {
            stmt.bindString(2, boardName);
        }
 
        String boardDesc = entity.getBoardDesc();
        if (boardDesc != null) {
            stmt.bindString(3, boardDesc);
        }
        stmt.bindLong(4, entity.getLetterNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Board entity) {
        stmt.clearBindings();
 
        String boardId = entity.getBoardId();
        if (boardId != null) {
            stmt.bindString(1, boardId);
        }
 
        String boardName = entity.getBoardName();
        if (boardName != null) {
            stmt.bindString(2, boardName);
        }
 
        String boardDesc = entity.getBoardDesc();
        if (boardDesc != null) {
            stmt.bindString(3, boardDesc);
        }
        stmt.bindLong(4, entity.getLetterNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Board readEntity(Cursor cursor, int offset) {
        Board entity = new Board( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // boardId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boardName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boardDesc
            cursor.getLong(offset + 3) // letterNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Board entity, int offset) {
        entity.setBoardId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBoardName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBoardDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLetterNum(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Board entity, long rowId) {
        return entity.getBoardId();
    }
    
    @Override
    public String getKey(Board entity) {
        if(entity != null) {
            return entity.getBoardId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Board entity) {
        return entity.getBoardId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
