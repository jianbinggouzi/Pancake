package com.pancaker.pancake.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.pancaker.pancake.domain.Board;
import com.pancaker.pancake.domain.Dynamics;
import com.pancaker.pancake.domain.Letter;
import com.pancaker.pancake.domain.User;
import com.pancaker.pancake.domain.OperateLog;
import com.pancaker.pancake.domain.Post;

import com.pancaker.pancake.dao.BoardDao;
import com.pancaker.pancake.dao.DynamicsDao;
import com.pancaker.pancake.dao.LetterDao;
import com.pancaker.pancake.dao.UserDao;
import com.pancaker.pancake.dao.OperateLogDao;
import com.pancaker.pancake.dao.PostDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig boardDaoConfig;
    private final DaoConfig dynamicsDaoConfig;
    private final DaoConfig letterDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig operateLogDaoConfig;
    private final DaoConfig postDaoConfig;

    private final BoardDao boardDao;
    private final DynamicsDao dynamicsDao;
    private final LetterDao letterDao;
    private final UserDao userDao;
    private final OperateLogDao operateLogDao;
    private final PostDao postDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        boardDaoConfig = daoConfigMap.get(BoardDao.class).clone();
        boardDaoConfig.initIdentityScope(type);

        dynamicsDaoConfig = daoConfigMap.get(DynamicsDao.class).clone();
        dynamicsDaoConfig.initIdentityScope(type);

        letterDaoConfig = daoConfigMap.get(LetterDao.class).clone();
        letterDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        operateLogDaoConfig = daoConfigMap.get(OperateLogDao.class).clone();
        operateLogDaoConfig.initIdentityScope(type);

        postDaoConfig = daoConfigMap.get(PostDao.class).clone();
        postDaoConfig.initIdentityScope(type);

        boardDao = new BoardDao(boardDaoConfig, this);
        dynamicsDao = new DynamicsDao(dynamicsDaoConfig, this);
        letterDao = new LetterDao(letterDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        operateLogDao = new OperateLogDao(operateLogDaoConfig, this);
        postDao = new PostDao(postDaoConfig, this);

        registerDao(Board.class, boardDao);
        registerDao(Dynamics.class, dynamicsDao);
        registerDao(Letter.class, letterDao);
        registerDao(User.class, userDao);
        registerDao(OperateLog.class, operateLogDao);
        registerDao(Post.class, postDao);
    }
    
    public void clear() {
        boardDaoConfig.clearIdentityScope();
        dynamicsDaoConfig.clearIdentityScope();
        letterDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        operateLogDaoConfig.clearIdentityScope();
        postDaoConfig.clearIdentityScope();
    }

    public BoardDao getBoardDao() {
        return boardDao;
    }

    public DynamicsDao getDynamicsDao() {
        return dynamicsDao;
    }

    public LetterDao getLetterDao() {
        return letterDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public OperateLogDao getOperateLogDao() {
        return operateLogDao;
    }

    public PostDao getPostDao() {
        return postDao;
    }

}
