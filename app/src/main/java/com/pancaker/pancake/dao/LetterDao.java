package com.pancaker.pancake.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pancaker.pancake.domain.Letter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LETTER".
*/
public class LetterDao extends AbstractDao<Letter, String> {

    public static final String TABLENAME = "LETTER";

    /**
     * Properties of entity Letter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property CreateTime = new Property(2, java.util.Date.class, "createTime", false, "create_time");
        public final static Property BoardId = new Property(3, String.class, "boardId", false, "board_id");
        public final static Property LetterTitle = new Property(4, String.class, "letterTitle", false, "title");
        public final static Property Views = new Property(5, int.class, "views", false, "views");
        public final static Property LetterReplies = new Property(6, int.class, "letterReplies", false, "replies");
        public final static Property LetterShares = new Property(7, int.class, "letterShares", false, "shares");
        public final static Property Digests = new Property(8, int.class, "digests", false, "digests");
        public final static Property Collects = new Property(9, int.class, "collects", false, "collects");
        public final static Property MainPostId = new Property(10, String.class, "mainPostId", false, "main_post_id");
        public final static Property Thanks = new Property(11, int.class, "thanks", false, "thanks");
        public final static Property LetterType = new Property(12, int.class, "letterType", false, "type");
    }


    public LetterDao(DaoConfig config) {
        super(config);
    }
    
    public LetterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LETTER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"user_id\" TEXT," + // 1: userId
                "\"create_time\" INTEGER," + // 2: createTime
                "\"board_id\" TEXT," + // 3: boardId
                "\"title\" TEXT," + // 4: letterTitle
                "\"views\" INTEGER NOT NULL ," + // 5: views
                "\"replies\" INTEGER NOT NULL ," + // 6: letterReplies
                "\"shares\" INTEGER NOT NULL ," + // 7: letterShares
                "\"digests\" INTEGER NOT NULL ," + // 8: digests
                "\"collects\" INTEGER NOT NULL ," + // 9: collects
                "\"main_post_id\" TEXT," + // 10: mainPostId
                "\"thanks\" INTEGER NOT NULL ," + // 11: thanks
                "\"type\" INTEGER NOT NULL );"); // 12: letterType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LETTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Letter entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime.getTime());
        }
 
        String boardId = entity.getBoardId();
        if (boardId != null) {
            stmt.bindString(4, boardId);
        }
 
        String letterTitle = entity.getLetterTitle();
        if (letterTitle != null) {
            stmt.bindString(5, letterTitle);
        }
        stmt.bindLong(6, entity.getViews());
        stmt.bindLong(7, entity.getLetterReplies());
        stmt.bindLong(8, entity.getLetterShares());
        stmt.bindLong(9, entity.getDigests());
        stmt.bindLong(10, entity.getCollects());
 
        String mainPostId = entity.getMainPostId();
        if (mainPostId != null) {
            stmt.bindString(11, mainPostId);
        }
        stmt.bindLong(12, entity.getThanks());
        stmt.bindLong(13, entity.getLetterType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Letter entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime.getTime());
        }
 
        String boardId = entity.getBoardId();
        if (boardId != null) {
            stmt.bindString(4, boardId);
        }
 
        String letterTitle = entity.getLetterTitle();
        if (letterTitle != null) {
            stmt.bindString(5, letterTitle);
        }
        stmt.bindLong(6, entity.getViews());
        stmt.bindLong(7, entity.getLetterReplies());
        stmt.bindLong(8, entity.getLetterShares());
        stmt.bindLong(9, entity.getDigests());
        stmt.bindLong(10, entity.getCollects());
 
        String mainPostId = entity.getMainPostId();
        if (mainPostId != null) {
            stmt.bindString(11, mainPostId);
        }
        stmt.bindLong(12, entity.getThanks());
        stmt.bindLong(13, entity.getLetterType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Letter readEntity(Cursor cursor, int offset) {
        Letter entity = new Letter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // boardId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // letterTitle
            cursor.getInt(offset + 5), // views
            cursor.getInt(offset + 6), // letterReplies
            cursor.getInt(offset + 7), // letterShares
            cursor.getInt(offset + 8), // digests
            cursor.getInt(offset + 9), // collects
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mainPostId
            cursor.getInt(offset + 11), // thanks
            cursor.getInt(offset + 12) // letterType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Letter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setBoardId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLetterTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setViews(cursor.getInt(offset + 5));
        entity.setLetterReplies(cursor.getInt(offset + 6));
        entity.setLetterShares(cursor.getInt(offset + 7));
        entity.setDigests(cursor.getInt(offset + 8));
        entity.setCollects(cursor.getInt(offset + 9));
        entity.setMainPostId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setThanks(cursor.getInt(offset + 11));
        entity.setLetterType(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Letter entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Letter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Letter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
