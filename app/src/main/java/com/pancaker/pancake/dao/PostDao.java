package com.pancaker.pancake.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pancaker.pancake.domain.Post;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST".
*/
public class PostDao extends AbstractDao<Post, String> {

    public static final String TABLENAME = "POST";

    /**
     * Properties of entity Post.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property CreateTime = new Property(2, java.util.Date.class, "createTime", false, "create_time");
        public final static Property PostText = new Property(3, String.class, "postText", false, "post_text");
        public final static Property LastPostId = new Property(4, String.class, "lastPostId", false, "last_post_id");
        public final static Property ToUserId = new Property(5, String.class, "toUserId", false, "to_user_id");
        public final static Property Digest = new Property(6, int.class, "digest", false, "digest");
    }


    public PostDao(DaoConfig config) {
        super(config);
    }
    
    public PostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"user_id\" TEXT," + // 1: userId
                "\"create_time\" INTEGER," + // 2: createTime
                "\"post_text\" TEXT," + // 3: postText
                "\"last_post_id\" TEXT," + // 4: lastPostId
                "\"to_user_id\" TEXT," + // 5: toUserId
                "\"digest\" INTEGER NOT NULL );"); // 6: digest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Post entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime.getTime());
        }
 
        String postText = entity.getPostText();
        if (postText != null) {
            stmt.bindString(4, postText);
        }
 
        String lastPostId = entity.getLastPostId();
        if (lastPostId != null) {
            stmt.bindString(5, lastPostId);
        }
 
        String toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindString(6, toUserId);
        }
        stmt.bindLong(7, entity.getDigest());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Post entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime.getTime());
        }
 
        String postText = entity.getPostText();
        if (postText != null) {
            stmt.bindString(4, postText);
        }
 
        String lastPostId = entity.getLastPostId();
        if (lastPostId != null) {
            stmt.bindString(5, lastPostId);
        }
 
        String toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindString(6, toUserId);
        }
        stmt.bindLong(7, entity.getDigest());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Post readEntity(Cursor cursor, int offset) {
        Post entity = new Post( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastPostId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toUserId
            cursor.getInt(offset + 6) // digest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Post entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPostText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastPostId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDigest(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Post entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Post entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Post entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
